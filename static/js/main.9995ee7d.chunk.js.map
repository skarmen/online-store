{"version":3,"sources":["components/Cart.js","components/Header.js","components/QuickView.js","firebase.js","components/Products.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Cart","toggleCart","setState","isCartOpen","state","getCartLength","props","cart","length","getCartSubtotal","reduce","accumulator","currentValue","parseFloat","price","substring","toFixed","this","className","onClick","aria-label","icon","faTimes","aria-hidden","map","product","index","src","picture","alt","name","href","faShoppingCart","Component","Header","id","readCart","tabindex","type","QuickView","description","size","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Products","toggleQuickView","productIndex","quickViewShown","quickViewIndex","products","database","ref","on","response","newState","dataFromDB","val","key","push","addToCart","Footer","target","App","cartCopy","newCart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9995ee7d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faShoppingCart, faTimes } from '@fortawesome/free-solid-svg-icons'\n\n\nclass Cart extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tisCartOpen: false\n\t\t}\n\t}\n\n  // toggle open and close state of the cart\n\ttoggleCart = () => {\n    this.setState({\n      isCartOpen: !this.state.isCartOpen\n    })\n  }\n\n\n\t// get the length of the cart array & use to update the qty count in the cart\n\tgetCartLength = () => {\n\t\treturn this.props.cart.length\n\t}\n\n\n\t// get the subtotal $ value in the cart\n\tgetCartSubtotal = () => {\n    let cartSubtotal = 0\n\n    // function to iterate over each item in cart\n    // get the price for each item and return a single output\n    const reducer = ((accumulator, currentValue) => {\n      // convert the string to a floating number\n      // substring - starts at index 1, the fist ch in price is $\n      currentValue = parseFloat(currentValue.price.substring(1))\n      return accumulator + currentValue\n    })\n\n    cartSubtotal = this.props.cart.reduce(reducer, 0).toFixed(2)\n      return cartSubtotal\n\t}\n\n\n  render() {\n    return this.state.isCartOpen ? (\n\t\t\t<div className=\"cartContainer\">\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<div className=\"cartCloseContainer\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"cartCloseBtn\"\n\t\t\t\t\t\t\tonClick={this.toggleCart}\n\t\t\t\t\t\t\taria-label=\"Close the shopping cart window.\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faTimes} aria-hidden=\"true\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"cartTopContent\">\n\t\t\t\t\t\t<h2>Your cart</h2>\n\t\t\t\t\t\t<h4 className=\"itemsQtyInCart\">\n\t\t\t\t\t\t\t{this.getCartLength()} item (s) in cart\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t{this.props.cart.map((product, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<div className=\"itemInCart\">\n\t\t\t\t\t\t\t\t\t<div className=\"itemImgInCart\">\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={product.picture}\n\t\t\t\t\t\t\t\t\t\t\talt={`A picture of a ${product.name}`}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"itemInfoInCart\">\n\t\t\t\t\t\t\t\t\t\t<h4>{product.name}</h4>\n\t\t\t\t\t\t\t\t\t\t<p>{product.price}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t})}\n\t\t\t\t\t<div className=\"cartBottomContent\">\n\t\t\t\t\t\t<div className=\"subtotalInCart\">\n\t\t\t\t\t\t\t<h4>Your Total: ${this.getCartSubtotal()}</h4>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"buyBtnContainer\">\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tclassName=\"buyBtn\"\n\t\t\t\t\t\t\t\thref=\"https://www.etsy.com/ca/shop/PampasGrassThinker?ref=simple-shop-header-name&listing_id=829497892\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tBuy Now\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t) : (\n\t\t\t<>\n\t\t\t\t<span className=\"cartQty\">{this.getCartLength()}</span>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"shoppingCart\"\n\t\t\t\t\taria-label=\"Shopping Cart\"\n\t\t\t\t\tonClick={this.toggleCart}\n\t\t\t\t>\n\t\t\t\t\t<FontAwesomeIcon icon={faShoppingCart} aria-hidden=\"true\" />\n\t\t\t\t</button>\n\t\t\t</>\n\t\t)\n  }\n}\n\nexport default Cart","import React, { Component } from 'react'\nimport Cart from './Cart'\n\nclass Header extends Component {\n\tconstructor() {\n    super()\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<header>\n\t\t\t\t<nav className=\"desktopNav\">\n\t\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t\t<div id=\"home\" className=\"headerNav\">\n\t\t\t\t\t\t\t<div className=\"headerNavLinks\">\n\t\t\t\t\t\t\t\t<ul className=\"headerNavList\">\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<a href=\"#home\">Home</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<a href=\"#products\">Products</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t<a href=\"#contact\">Contact</a>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"headerCart\">\n\t\t\t\t\t\t\t\t<Cart\n\t\t\t\t\t\t\t\t\treadCart={this.props.readCart}\n\t\t\t\t\t\t\t\t\tcart={this.props.cart}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</nav>\n\n        {/* Mobile Nav  */}\n        <nav className=\"mobileNav\">\n          <div className=\"mobileNavContainer\">\n            <div tabindex=\"0\" className=\"menuToggle\">\n\n              {/* A hidden checkbox is used as click receiver,\n                so you can use the :checked selector on it */}\n              <input  type=\"checkbox\" />\n\n              {/* Spans acting as hamburger menu */}\n              <span></span>\n              <span></span>\n              <span></span>\n\n              <ul className=\"mobileMenuList\">\n                <li>\n                  <a href=\"#home\">Home</a>\n                </li>\n                <li>\n                  <a href=\"#products\">Products</a>\n                </li>\n                <li>\n                  <a href=\"#contact\">Contact</a>\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"wrapper\">\n              <div className=\"headerCart\">\n                <Cart\n                  readCart={this.props.readCart}\n                  cart={this.props.cart}\n                />\n              </div>\n            </div>\n          </div>\n        </nav>\n\t\t\t</header>\n\t\t)\n\t}\n}\n\nexport default Header","import React, { Component } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nclass QuickView extends Component {\n  constructor() {\n    super()\n  }\n\n  render() {\n    return (\n\t\t\t<div className=\"quickViewContainer\">\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<div className=\"quickViewCloseContainer\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"quickViewCloseBtn\"\n\t\t\t\t\t\t\tonClick={this.props.onClick}\n\t\t\t\t\t\t\taria-label=\"Close the quickview window.\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faTimes} aria-hidden=\"true\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"quickViewContent\">\n\t\t\t\t\t\t<div className=\"quickViewProductImgContainer\">\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName=\"quickViewProductImg\"\n\t\t\t\t\t\t\t\tsrc={this.props.picture}\n\t\t\t\t\t\t\t\talt={`A picture of a ${this.props.name}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<h3 className=\"quickViewProductName\">{this.props.name}</h3>\n\t\t\t\t\t\t<p className=\"quickViewProductDescription\">\n\t\t\t\t\t\t\tProduct Description: {this.props.description}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p className=\"quickViewProductPrice\">Price: {this.props.price}</p>\n\t\t\t\t\t\t<p className=\"quickViewProductSize\">Size: {this.props.size}</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n  }\n}\n\nexport default QuickView","// firebase.js\nimport firebase from 'firebase/app'\nimport 'firebase/database'\n\n // Web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyC8CgaUnH_WbZwABYdMrdX7NNdv8i5y2io\",\n    authDomain: \"pampas-grass-thinker-app.firebaseapp.com\",\n    databaseURL: \"https://pampas-grass-thinker-app.firebaseio.com\",\n    projectId: \"pampas-grass-thinker-app\",\n    storageBucket: \"pampas-grass-thinker-app.appspot.com\",\n    messagingSenderId: \"414192984550\",\n    appId: \"1:414192984550:web:266f2e38e606fddff3b627\"\n  }\n  \n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase\n","import React, { Component } from 'react'\nimport QuickView from './QuickView'\nimport firebase from '../firebase'\n\nclass Products extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tproducts: [],\n\t\t\tquickViewShown: false\n\t\t}\n\t}\n\n  \n  // toggle the quickview open & close states\n  // this is used for both the \"Close\" btn on the quickview div\n  // and the 'QuickView' button on the product\n\ttoggleQuickView = (productIndex) => {\n\t\tthis.setState({\n\t\t\tquickViewShown: !this.state.quickViewShown,\n\t\t\tquickViewIndex: productIndex\n\t\t})\n\t}\n\n\n\tcomponentDidMount() {\n\t\t// create a variable that holds a reference to our database\n\t\tconst dbRef = firebase.database().ref()\n\n\t\t// add an event listener to that variable that will fire\n\t\t// every time there is a change in the database.\n\n    // this event listener takes a callback function which we will use to get\n\t\t// our data from the database, and call that data 'response'.\n\t\tdbRef.on('value', (response) => {\n\n\t\t\t// create a variable to store the new state we want to introduce to our app\n      const newState = []\n\n\t\t\t// use Firebase's .val() method to parse our db info the way we want it\n\t\t\tconst dataFromDB = response.val()\n\n      // iterate through the data object to access he properties of each product\n\t\t\tfor (let key in dataFromDB.products) {\n\t\t\t\t// push each product obj to an array\n\t\t\t\tnewState.push(dataFromDB.products[key])\n\t\t\t}\n\n\t\t\t// update the component's state\n\t\t\tthis.setState({\n\t\t\t\tproducts: newState\n\t\t\t})\n\t\t})\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<main>\n\t\t\t\t<section id=\"products\" className=\"productsSection\">\n\t\t\t\t\t<div className=\"wrapper\">\n            <div className=\"sectionTitle\">\n              <h1>Shop Our Products</h1>\n            </div>\n\t\t\t\t\t\t<div className=\"productsContainer\">\n              {/* The component will map through the products array,\n               grabbing any products it finds in there and display them as a\n               list on the page. */}\n\t\t\t\t\t\t\t{this.state.products.map((product, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div key={index} className=\"productItem\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"productImgContainer\">\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"productImg\"\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={product.picture}\n\t\t\t\t\t\t\t\t\t\t\t\talt={`A picture of a ${product.name}`}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t<h3 className=\"productName\">{product.name}</h3>\n\t\t\t\t\t\t\t\t\t\t<p className=\"productPrice\">{product.price}</p>\n\n\t\t\t\t\t\t\t\t\t\t<div className=\"productBtnContainer\">\n                      <button\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"quickViewBtn\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.toggleQuickView(index)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tQuickview\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"addBtn\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.props.addToCart(product)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tAdd to Cart\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"quickView\">\n                      {/* passing the product index to toggleQuickView function,\n                       checking if the product index matches the quickViewIndex\n                        this will trigger only the quickView div on the clicked\n                        product to open (based on the index match)*/}\n\t\t\t\t\t\t\t\t\t\t\t{this.state.quickViewShown &&\n\t\t\t\t\t\t\t\t\t\t\tthis.state.quickViewIndex === index ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<QuickView\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={product.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdescription={product.description}\n\t\t\t\t\t\t\t\t\t\t\t\t\tprice={product.price}\n\t\t\t\t\t\t\t\t\t\t\t\t\tsize={product.size}\n\t\t\t\t\t\t\t\t\t\t\t\t\tpicture={product.picture}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.toggleQuickView(index)}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</main>\n\t\t)\n\t}\n}\n\nexport default Products","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <footer id=\"contact\">\n      <div className=\"wrapper\">\n        <div className=\"footerContainer\">\n          <p>\n            &copy; 2020 Karmen Salim\n\t\t\t\t\t\t\t<a href=\"https://junocollege.com/\" className=\"junoFooterLink\">\n              <span> | Created at Juno College</span>\n            </a>\n          </p>\n          <p>\n            All images and products &copy;\n\t\t\t\t\t\t\t<a\n              href=\"https://www.etsy.com/ca/shop/PampasGrassThinker?ref=simple-shop-header-name&listing_id=829497892\"\n              target=\"_blank\"> PampasGrassThinker</a>\n          </p>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer","import React, { Component } from 'react'\nimport './App.css'\n\n// import the other components\nimport Header from './components/Header'\nimport Products from './components/Products'\nimport Footer from './components/Footer'\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n      cart: [],\n      newCart: []\n\t\t}\n  }\n\n\n\t// update the cart state\n\t// this will be triggered on 'Add to Cart' btn click in Products.js\n\taddToCart = (product) => {\n\t\tlet cartCopy = [...this.state.cart]\n\t\tcartCopy.push(product)\n\n    return this.setState({\n      cart: cartCopy,\n      newCart: cartCopy\n    })\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header cart={this.state.newCart}/>\n\t\t\t\t<Products addToCart={this.addToCart}/>\n\t\t\t\t<Footer/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}